// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  CLOSED
  CANCELED
  BLACKLISTED
  BLOCKED
}

enum UserRole {
  ADMIN
  CUSTOMER
  FRONT_DESK_OFFICER
}

enum SeatType {
  REGULAR
  PREMIUM
  ACCESSIBLE
  EMERGENCYEXIT
  OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILD
  CANCELED
}

enum BookingStatus {
  REQUESTED
  PENDING
  CONFIRMED
  CHECKED_IN
  CANCELED
}

model User {
  id                 Int               @id @default(autoincrement())
  name               String
  email              String            @unique
  phone              String            
  password           String
  admin              Admin?
  customer           Customer?
  front_desk_officer FrontDeskOfficer?
  address_id         Int?              @unique
  address            Address?          @relation(fields: [address_id], references: [id])
  status             UserStatus
  rt                 String?
  notifications      Notification[]
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
}

model Admin {
  id      Int     @id @default(autoincrement())
  user_id Int     @unique
  user    User    @relation(fields: [user_id], references: [id])
  movies  Movie[]
  shows   Show[]
}

model Customer {
  id       Int       @id @default(autoincrement())
  user_id  Int       @unique
  user     User      @relation(fields: [user_id], references: [id])
  bookings Booking[]
}

model FrontDeskOfficer {
  id                       Int                        @id @default(autoincrement())
  user_id                  Int                        @unique
  user                     User                       @relation(fields: [user_id], references: [id])
  booking_frontDeskOfficer Booking_FrontDeskOfficer[]
}

model Address {
  id             Int      @id @default(autoincrement())
  street_address String
  state          String
  zipcode        String
  country        String
  user           User?
  cinema         Cinema?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model Notification {
  id                 Int                @id @default(autoincrement())
  content            String
  user_id            Int
  user               User               @relation(fields: [user_id], references: [id])
  created_at         DateTime           @default(now())
  bookingId          Int?
  email_notification EmailNotification?
  sms_notification   SmsNotification?
  booking            Booking?           @relation(fields: [bookingId], references: [id])
  updated_at         DateTime           @updatedAt
}

model Movie {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  duration_min Int
  language     String
  release_date DateTime
  country      String
  genre        String
  admin_id     Int      @unique
  admin        Admin    @relation(fields: [admin_id], references: [id])
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model Show {
  id             Int        @id @default(autoincrement())
  start_time     DateTime
  end_time       DateTime
  admin_id       Int
  admin          Admin      @relation(fields: [admin_id], references: [id])
  cinema_hall_id Int
  cinema_hall    CinemaHall @relation(fields: [cinema_hall_id], references: [id])
  bookings       Booking[]
  show_seats     ShowSeat[]
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
}

model CinemaHall {
  id               Int              @id @default(autoincrement())
  name             String
  total_seats      Int
  shows            Show[]
  cinema_id        Int
  cinema           Cinema @relation(fields: [cinema_id], references: [id])
  cinema_hall_seat CinemaHallSeat[]
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
}

model CinemaHallSeat {
  id             Int        @id @default(autoincrement())
  seat_row       Int
  seat_col       Int
  type           SeatType
  cinema_hall_id Int
  cinema_hall    CinemaHall @relation(fields: [cinema_hall_id], references: [id])
  show_seat      ShowSeat?
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
}

model Cinema {
  id                Int      @id @default(autoincrement())
  name              String
  total_cinema_hall Int
  cinemaHalls       CinemaHall[]
  address_id        Int      @unique
  address           Address  @relation(fields: [address_id], references: [id])
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}

model Booking_FrontDeskOfficer {
  booking_id            Int
  booking               Booking          @relation(fields: [booking_id], references: [id])
  front_desk_officer_id Int
  front_desk_officer    FrontDeskOfficer @relation(fields: [front_desk_officer_id], references: [id])
  created_at            DateTime         @default(now())
  updated_at            DateTime         @updatedAt

  @@id([booking_id, front_desk_officer_id])
}

model Booking {
  id                       Int                        @id @default(autoincrement())
  booking_no               String
  number_of_seats          Int
  status                   BookingStatus
  customer_id              Int?                       @unique
  customer                 Customer?                  @relation(fields: [customer_id], references: [id])
  booking_frontDeskOfficer Booking_FrontDeskOfficer[]
  notifications            Notification[]
  show_id                  Int
  show                     Show                       @relation(fields: [show_id], references: [id])
  show_seats               ShowSeat[]
  payment                  Payment?
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @updatedAt
}

model EmailNotification {
  id              Int          @id @default(autoincrement())
  notification_id Int          @unique
  notification    Notification @relation(fields: [notification_id], references: [id])
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
}

model SmsNotification {
  id              Int          @id @default(autoincrement())
  notification_id Int          @unique
  notification    Notification @relation(fields: [notification_id], references: [id])
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
}

model ShowSeat {
  id                  Int            @id @default(autoincrement())
  seat_number         Int
  is_reserved         Boolean
  price               Float
  booking_id          Int
  booking             Booking        @relation(fields: [booking_id], references: [id])
  show_id             Int
  show                Show           @relation(fields: [show_id], references: [id])
  cinema_hall_seat_id Int            @unique
  cinema_hall_seat    CinemaHallSeat @relation(fields: [cinema_hall_seat_id], references: [id])
}

model Payment {
  id                      Int                    @id @default(autoincrement())
  amount                  Float
  payment_status          PaymentStatus
  transaction_id          Int
  credit_card_transaction CreditCardTransaction?
  cash_transaction        CashTransaction?
  booking_id              Int                    @unique
  booking                 Booking                @relation(fields: [booking_id], references: [id])
  coupon_id               Int?
  coupon                  Coupon?                @relation(fields: [coupon_id], references: [id])
  created_at              DateTime               @default(now())
  updated_at              DateTime               @updatedAt
}

model CreditCardTransaction {
  id           Int     @id @default(autoincrement())
  name_on_card String
  payment_id   Int     @unique
  payment      Payment @relation(fields: [payment_id], references: [id])
}

model CashTransaction {
  id           Int     @id @default(autoincrement())
  name_on_card String
  payment_id   Int     @unique
  payment      Payment @relation(fields: [payment_id], references: [id])
}

model Coupon {
  id         Int       @id @default(autoincrement())
  balance    Float
  expiry     DateTime
  payments   Payment[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

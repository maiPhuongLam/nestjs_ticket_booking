// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  CLOSED
  CANCELED
  BLACKLISTED
  BLOCKED
}

enum UserRole {
  ADMIN
  CUSTOMER
  FRONT_DESK_OFFICER
}

enum SeatType {
  REGULAR
  PREMIUM
  ACCESSIBLE
  EMERGENCYEXIT
  OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILD
  CANCELED
}

enum BookingStatus {
  REQUESTED
  PENDING
  CONFIRMED
  CHECKED_IN
  CANCELED
}

model User {
  id                 Int               @id @default(autoincrement())
  name               String
  email              String            @unique
  phone              String
  password           String
  admin              Admin?
  customer           Customer?
  frontDeskOfficer FrontDeskOfficer?
  addressId         Int?              @unique
  address            Address?          @relation(fields: [addressId], references: [id])
  status             UserStatus
  rt                 String?
  notifications      Notification[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Admin {
  id      Int     @id @default(autoincrement())
  userId Int     @unique
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movies  Movie[]
  shows   Show[]
}

model Customer {
  id       Int       @id @default(autoincrement())
  userId  Int       @unique
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookings Booking[]
}

model FrontDeskOfficer {
  id                       Int                        @id @default(autoincrement())
  userId                  Int                        @unique
  user                     User                       @relation(fields: [userId], references: [id])
  bookingFrontDeskOfficer Booking_FrontDeskOfficer[]
}

model Address {
  id             Int      @id @default(autoincrement())
  streetAddress String
  state          String
  zipcode        String
  country        String
  user           User?
  cinema         Cinema?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Notification {
  id                 Int                @id @default(autoincrement())
  content            String
  userId            Int
  user               User               @relation(fields: [userId], references: [id])
  createdAt         DateTime           @default(now())
  bookingId          Int?
  emailNotification EmailNotification?
  smsNotification   SmsNotification?
  booking            Booking?           @relation(fields: [bookingId], references: [id])
  updatedAt         DateTime           @updatedAt
}

model Movie {
  id                  Int      @id @default(autoincrement())
  title               String
  description         String
  durationMin        Int
  language            String
  thumbnailPublicId String?
  thumbnailUrl       String?  @default("https://s.net.vn/nCGD")
  releaseDate        DateTime
  country             String
  genre               String
  adminId            Int
  admin               Admin    @relation(fields: [adminId], references: [id])
  shows               Show[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Show {
  id             Int        @id @default(autoincrement())
  startTime     DateTime
  endTime       DateTime
  adminId       Int
  admin          Admin      @relation(fields: [adminId], references: [id])
  cinemaHallId Int
  cinemaHall    CinemaHall @relation(fields: [cinemaHallId], references: [id])
  movieId       Int
  movie          Movie @relation(fields: [movieId], references: [id])
  bookings       Booking[]
  showSeats     ShowSeat[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model CinemaHall {
  id               Int              @id @default(autoincrement())
  name             String
  totalSeats      Int  
  totalRows       Int
  rows             Row[]
  shows            Show[]
  cinemaId        Int
  cinema           Cinema           @relation(fields: [cinemaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Row {
  id               Int              @id @default(autoincrement())
  rowNum          Int           
  totalSeats      Int
  cinemaHallId   Int 
  cinemaHall      CinemaHall @relation(fields: [cinemaHallId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seats            Seat[]
}

model Seat {
  id             Int        @id @default(autoincrement())
  seatRow       Int
  seatCol       Int
  type           SeatType
  rowId         Int
  row            Row @relation(fields: [rowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  showSeat      ShowSeat?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Cinema {
  id                Int          @id @default(autoincrement())
  name              String
  totalCinemaHalls Int
  cinemaHalls       CinemaHall[]
  addressId        Int          @unique
  address           Address      @relation(fields: [addressId], references: [id])
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Booking_FrontDeskOfficer {
  bookingId            Int
  booking               Booking          @relation(fields: [bookingId], references: [id])
  frontDeskOfficerId Int
  frontDeskOfficer    FrontDeskOfficer @relation(fields: [frontDeskOfficerId], references: [id])
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  @@id([bookingId, frontDeskOfficerId])
}

model Booking {
  id                       Int                        @id @default(autoincrement())
  bookingNo               String
  numberOfSeats          Int
  status                   BookingStatus
  customerId              Int?                       @unique
  customer                 Customer?                  @relation(fields: [customerId], references: [id])
  bookingFrontDeskOfficer Booking_FrontDeskOfficer[]
  notifications            Notification[]
  showId                  Int
  show                     Show                       @relation(fields: [showId], references: [id])
  showSeats               ShowSeat[]
  payment                  Payment?
  createdAt               DateTime                   @default(now())
  updatedAt               DateTime                   @updatedAt
}

model EmailNotification {
  id              Int          @id @default(autoincrement())
  notificationId Int          @unique
  notification    Notification @relation(fields: [notificationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model SmsNotification {
  id              Int          @id @default(autoincrement())
  notificationId Int          @unique
  notification    Notification @relation(fields: [notificationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model ShowSeat {
  id                  Int            @id @default(autoincrement())
  seatNumber         String
  isReserved         Boolean
  price               Float
  bookingId          Int?
  booking             Booking?       @relation(fields: [bookingId], references: [id])
  showId             Int
  show                Show           @relation(fields: [showId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cinemaHallSeatId Int            @unique
  cinemaHallSeat    Seat @relation(fields: [cinemaHallSeatId], references: [id])
}

model Payment {
  id                      Int                    @id @default(autoincrement())
  amount                  Float
  paymentStatus          PaymentStatus
  transactionId          Int
  creditCardTransaction CreditCardTransaction?
  cashTransaction        CashTransaction?
  bookingId              Int                    @unique
  booking                 Booking                @relation(fields: [bookingId], references: [id])
  couponId               Int?
  coupon                  Coupon?                @relation(fields: [couponId], references: [id])
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
}

model CreditCardTransaction {
  id           Int     @id @default(autoincrement())
  nameOnCard String
  paymentId   Int     @unique
  payment      Payment @relation(fields: [paymentId], references: [id])
}

model CashTransaction {
  id           Int     @id @default(autoincrement())
  nameOnCard String
  paymentId   Int     @unique
  payment      Payment @relation(fields: [paymentId], references: [id])
}

model Coupon {
  id         Int       @id @default(autoincrement())
  balance    Float
  expiry     DateTime
  payments   Payment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
